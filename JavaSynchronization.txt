Synchronization in Java
Synchronization in java is the capability to control the access of multiple threads to any shared resource.

Java Synchronization is better option where we want to allow only one thread to access the shared resource.

Why use Synchronization
The synchronization is mainly used to

To prevent thread interference.
To prevent consistency problem.
Types of Synchronization
There are two types of synchronization

Process Synchronization
Thread Synchronization
Here, we will discuss only thread synchronization.

Thread Synchronization
There are two types of thread synchronization mutual exclusive and inter-thread communication.

Mutual Exclusive
Synchronized method.
Synchronized block.
static synchronization.
Cooperation (Inter-thread communication in java)
 
Concept of Lock in Java
Synchronization is built around an internal entity known as the lock or monitor. 
Every object has an lock associated with it. By convention,
 a thread that needs consistent access to an object's fields has to acquire the object's lock before accessing them, 
 and then release the lock when it's done with them.

From Java 5 the package java.util.concurrent.locks contains several lock implementations.
 --------------------------------------------------
 Deadlock in java
Deadlock in java is a part of multithreading. Deadlock can occur in a situation when a thread is waiting for an object lock,
 that is acquired by another thread and second thread is waiting for an object lock that is acquired by first thread.
 Since, both threads are waiting for each other to release the lock, the condition is called deadlock.

 
--------------------------------------------------
Inter-thread communication in Java
Inter-thread communication or Co-operation is all about allowing synchronized threads to communicate with each other.

Cooperation (Inter-thread communication) is a mechanism in which a thread is paused running in its critical section and
another thread is allowed to enter (or lock) in the same critical section to be executed.
It is implemented by following methods of Object class:

wait()
notify()
notifyAll()

1) wait() method
Causes current thread to release the lock and wait until either another thread invokes the notify() method 
or the notifyAll() method for this object, or a specified amount of time has elapsed.
The current thread must own this object's monitor, so it must be called from the synchronized method only otherwise 
it will throw exception.
public final void wait()throws InterruptedException	waits until object is notified.
public final void wait(long timeout)throws InterruptedException	waits for the specified amount of time.

2) notify() method
Wakes up a single thread that is waiting on this object's monitor.
 If any threads are waiting on this object, one of them is chosen to be awakened. 
 The choice is arbitrary and occurs at the discretion of the implementation. Syntax:
public final void notify()
3) notifyAll() method
Wakes up all threads that are waiting on this object's monitor. Syntax:
public final void notifyAll()


Why wait(), notify() and notifyAll() methods are defined in Object class not Thread class?
It is because they are related to lock and object has a lock.

Difference between wait and sleep?
Let's see the important differences between wait and sleep methods.

wait()	                              sleep()
wait() method releases the lock   	sleep() method doesn't release the lock.
is the method of Object class	      is the method of Thread class
is the non-static method	          is the static method
is the non-static method	            is the static method
should be notified by notify() or notifyAll() methods	after the specified amount of time, sleep is completed.
---------------------------------------
Interrupting a Thread:
If any thread is in sleeping or waiting state (i.e. sleep() or wait() is invoked), calling the interrupt() method on the thread, breaks out the sleeping or waiting state throwing InterruptedException. If the thread is not in the sleeping or waiting state, calling the interrupt() method performs normal behaviour and doesn't interrupt the thread but sets the interrupt flag to true. Let's first see the methods provided by the Thread class for thread interruption.
The 3 methods provided by the Thread class for interrupting a thread
public void interrupt()
public static boolean interrupted()
public boolean isInterrupted()











